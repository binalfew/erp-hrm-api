# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

type Department {
  _count: DepartmentCount
  children: [Department!]
  code: String!
  createdAt: Timestamp!
  id: ID!
  locales: JSON
  name: String!
  parent: Department
  parentId: Int
  positions: [Position!]
  updatedAt: Timestamp!
}

type DepartmentAvgAggregate {
  id: Float
  parentId: Float
}

type DepartmentCount {
  children: Int!
  positions: Int!
}

type DepartmentCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  id: Int!
  locales: Int!
  name: Int!
  parentId: Int!
  updatedAt: Int!
}

input DepartmentCreateInput {
  children: DepartmentCreateNestedManyWithoutParentInput
  code: String!
  createdAt: Timestamp
  locales: JSON
  name: String!
  parent: DepartmentCreateNestedOneWithoutChildrenInput
  positions: PositionCreateNestedManyWithoutDepartmentInput
  updatedAt: Timestamp
}

input DepartmentCreateManyParentInput {
  code: String!
  createdAt: Timestamp
  id: Int
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

input DepartmentCreateManyParentInputEnvelope {
  data: [DepartmentCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input DepartmentCreateNestedManyWithoutParentInput {
  connect: [DepartmentWhereUniqueInput!]
  connectOrCreate: [DepartmentCreateOrConnectWithoutParentInput!]
  create: [DepartmentCreateWithoutParentInput!]
  createMany: DepartmentCreateManyParentInputEnvelope
}

input DepartmentCreateNestedOneWithoutChildrenInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutChildrenInput
  create: DepartmentCreateWithoutChildrenInput
}

input DepartmentCreateNestedOneWithoutPositionsInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutPositionsInput
  create: DepartmentCreateWithoutPositionsInput
}

input DepartmentCreateOrConnectWithoutChildrenInput {
  create: DepartmentCreateWithoutChildrenInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateOrConnectWithoutParentInput {
  create: DepartmentCreateWithoutParentInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateOrConnectWithoutPositionsInput {
  create: DepartmentCreateWithoutPositionsInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateWithoutChildrenInput {
  code: String!
  createdAt: Timestamp
  locales: JSON
  name: String!
  parent: DepartmentCreateNestedOneWithoutChildrenInput
  positions: PositionCreateNestedManyWithoutDepartmentInput
  updatedAt: Timestamp
}

input DepartmentCreateWithoutParentInput {
  children: DepartmentCreateNestedManyWithoutParentInput
  code: String!
  createdAt: Timestamp
  locales: JSON
  name: String!
  positions: PositionCreateNestedManyWithoutDepartmentInput
  updatedAt: Timestamp
}

input DepartmentCreateWithoutPositionsInput {
  children: DepartmentCreateNestedManyWithoutParentInput
  code: String!
  createdAt: Timestamp
  locales: JSON
  name: String!
  parent: DepartmentCreateNestedOneWithoutChildrenInput
  updatedAt: Timestamp
}

type DepartmentEdge {
  cursor: String!
  node: Department!
}

input DepartmentListRelationFilter {
  every: DepartmentWhereInput
  none: DepartmentWhereInput
  some: DepartmentWhereInput
}

type DepartmentMaxAggregate {
  code: String
  createdAt: Timestamp
  id: Int
  name: String
  parentId: Int
  updatedAt: Timestamp
}

type DepartmentMinAggregate {
  code: String
  createdAt: Timestamp
  id: Int
  name: String
  parentId: Int
  updatedAt: Timestamp
}

input DepartmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input DepartmentOrderByWithRelationInput {
  children: DepartmentOrderByRelationAggregateInput
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  parent: DepartmentOrderByWithRelationInput
  parentId: SortOrder
  positions: PositionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input DepartmentRelationFilter {
  is: DepartmentWhereInput
  isNot: DepartmentWhereInput
}

enum DepartmentScalarFieldEnum {
  code
  createdAt
  id
  locales
  name
  parentId
  updatedAt
}

input DepartmentScalarWhereInput {
  AND: [DepartmentScalarWhereInput!]
  NOT: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  parentId: IntNullableFilter
  updatedAt: DateTimeFilter
}

type DepartmentSumAggregate {
  id: Int
  parentId: Int
}

input DepartmentUpdateInput {
  children: DepartmentUpdateManyWithoutParentInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  parent: DepartmentUpdateOneWithoutChildrenInput
  positions: PositionUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateManyWithWhereWithoutParentInput {
  data: DepartmentUpdateManyMutationInput!
  where: DepartmentScalarWhereInput!
}

input DepartmentUpdateManyWithoutParentInput {
  connect: [DepartmentWhereUniqueInput!]
  connectOrCreate: [DepartmentCreateOrConnectWithoutParentInput!]
  create: [DepartmentCreateWithoutParentInput!]
  createMany: DepartmentCreateManyParentInputEnvelope
  delete: [DepartmentWhereUniqueInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [DepartmentUpdateManyWithWhereWithoutParentInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutParentInput!]
}

input DepartmentUpdateOneWithoutChildrenInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutChildrenInput
  create: DepartmentCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: DepartmentUpdateWithoutChildrenInput
  upsert: DepartmentUpsertWithoutChildrenInput
}

input DepartmentUpdateOneWithoutPositionsInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutPositionsInput
  create: DepartmentCreateWithoutPositionsInput
  delete: Boolean
  disconnect: Boolean
  update: DepartmentUpdateWithoutPositionsInput
  upsert: DepartmentUpsertWithoutPositionsInput
}

input DepartmentUpdateWithWhereUniqueWithoutParentInput {
  data: DepartmentUpdateWithoutParentInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentUpdateWithoutChildrenInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  parent: DepartmentUpdateOneWithoutChildrenInput
  positions: PositionUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateWithoutParentInput {
  children: DepartmentUpdateManyWithoutParentInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateWithoutPositionsInput {
  children: DepartmentUpdateManyWithoutParentInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  parent: DepartmentUpdateOneWithoutChildrenInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpsertWithWhereUniqueWithoutParentInput {
  create: DepartmentCreateWithoutParentInput!
  update: DepartmentUpdateWithoutParentInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentUpsertWithoutChildrenInput {
  create: DepartmentCreateWithoutChildrenInput!
  update: DepartmentUpdateWithoutChildrenInput!
}

input DepartmentUpsertWithoutPositionsInput {
  create: DepartmentCreateWithoutPositionsInput!
  update: DepartmentUpdateWithoutPositionsInput!
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  children: DepartmentListRelationFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  parent: DepartmentRelationFilter
  parentId: IntNullableFilter
  positions: PositionListRelationFilter
  updatedAt: DateTimeFilter
}

input DepartmentWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type Employee {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp!
  dateOfBirth: Timestamp!
  deleted: Boolean!
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp!
  employmentNature: EmploymentNature
  employmentNatureId: Int
  employmentType: EmploymentType
  employmentTypeId: Int
  firstName: JSON!
  gender: Gender
  genderId: Int
  grandfatherName: JSON!
  id: ID!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatus: MaritalStatus
  maritalStatusId: Int
  nationality: Nationality
  nationalityId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp!
  retirementDate: Timestamp!
  updatedAt: Timestamp!
}

input EmployeeCreateManyEmploymentNatureInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentTypeId: Int
  firstName: JSON!
  genderId: Int
  grandfatherName: JSON!
  id: Int
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatusId: Int
  nationalityId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateManyEmploymentNatureInputEnvelope {
  data: [EmployeeCreateManyEmploymentNatureInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyEmploymentTypeInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNatureId: Int
  firstName: JSON!
  genderId: Int
  grandfatherName: JSON!
  id: Int
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatusId: Int
  nationalityId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateManyEmploymentTypeInputEnvelope {
  data: [EmployeeCreateManyEmploymentTypeInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyGenderInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNatureId: Int
  employmentTypeId: Int
  firstName: JSON!
  grandfatherName: JSON!
  id: Int
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatusId: Int
  nationalityId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateManyGenderInputEnvelope {
  data: [EmployeeCreateManyGenderInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyMaritalStatusInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNatureId: Int
  employmentTypeId: Int
  firstName: JSON!
  genderId: Int
  grandfatherName: JSON!
  id: Int
  idNumber: String!
  lastName: JSON!
  locales: JSON
  nationalityId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateManyMaritalStatusInputEnvelope {
  data: [EmployeeCreateManyMaritalStatusInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyNationalityInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNatureId: Int
  employmentTypeId: Int
  firstName: JSON!
  genderId: Int
  grandfatherName: JSON!
  id: Int
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatusId: Int
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateManyNationalityInputEnvelope {
  data: [EmployeeCreateManyNationalityInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateNestedManyWithoutEmploymentNatureInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutEmploymentNatureInput!]
  create: [EmployeeCreateWithoutEmploymentNatureInput!]
  createMany: EmployeeCreateManyEmploymentNatureInputEnvelope
}

input EmployeeCreateNestedManyWithoutEmploymentTypeInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutEmploymentTypeInput!]
  create: [EmployeeCreateWithoutEmploymentTypeInput!]
  createMany: EmployeeCreateManyEmploymentTypeInputEnvelope
}

input EmployeeCreateNestedManyWithoutGenderInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutGenderInput!]
  create: [EmployeeCreateWithoutGenderInput!]
  createMany: EmployeeCreateManyGenderInputEnvelope
}

input EmployeeCreateNestedManyWithoutMaritalStatusInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutMaritalStatusInput!]
  create: [EmployeeCreateWithoutMaritalStatusInput!]
  createMany: EmployeeCreateManyMaritalStatusInputEnvelope
}

input EmployeeCreateNestedManyWithoutNationalityInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutNationalityInput!]
  create: [EmployeeCreateWithoutNationalityInput!]
  createMany: EmployeeCreateManyNationalityInputEnvelope
}

input EmployeeCreateOrConnectWithoutEmploymentNatureInput {
  create: EmployeeCreateWithoutEmploymentNatureInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutEmploymentTypeInput {
  create: EmployeeCreateWithoutEmploymentTypeInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutGenderInput {
  create: EmployeeCreateWithoutGenderInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutMaritalStatusInput {
  create: EmployeeCreateWithoutMaritalStatusInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutNationalityInput {
  create: EmployeeCreateWithoutNationalityInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutEmploymentNatureInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentType: EmploymentTypeCreateNestedOneWithoutEmployeesInput
  firstName: JSON!
  gender: GenderCreateNestedOneWithoutEmployeesInput
  grandfatherName: JSON!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatus: MaritalStatusCreateNestedOneWithoutEmployeesInput
  nationality: NationalityCreateNestedOneWithoutEmployeesInput
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateWithoutEmploymentTypeInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNature: EmploymentNatureCreateNestedOneWithoutEmployeesInput
  firstName: JSON!
  gender: GenderCreateNestedOneWithoutEmployeesInput
  grandfatherName: JSON!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatus: MaritalStatusCreateNestedOneWithoutEmployeesInput
  nationality: NationalityCreateNestedOneWithoutEmployeesInput
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateWithoutGenderInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNature: EmploymentNatureCreateNestedOneWithoutEmployeesInput
  employmentType: EmploymentTypeCreateNestedOneWithoutEmployeesInput
  firstName: JSON!
  grandfatherName: JSON!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatus: MaritalStatusCreateNestedOneWithoutEmployeesInput
  nationality: NationalityCreateNestedOneWithoutEmployeesInput
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateWithoutMaritalStatusInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNature: EmploymentNatureCreateNestedOneWithoutEmployeesInput
  employmentType: EmploymentTypeCreateNestedOneWithoutEmployeesInput
  firstName: JSON!
  gender: GenderCreateNestedOneWithoutEmployeesInput
  grandfatherName: JSON!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  nationality: NationalityCreateNestedOneWithoutEmployeesInput
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeCreateWithoutNationalityInput {
  Phone: String!
  countryOfBirth: String!
  createdAt: Timestamp
  dateOfBirth: Timestamp
  deleted: Boolean
  email: String!
  emergencyContact: String!
  emergencyPhone: String!
  employmentDate: Timestamp
  employmentNature: EmploymentNatureCreateNestedOneWithoutEmployeesInput
  employmentType: EmploymentTypeCreateNestedOneWithoutEmployeesInput
  firstName: JSON!
  gender: GenderCreateNestedOneWithoutEmployeesInput
  grandfatherName: JSON!
  idNumber: String!
  lastName: JSON!
  locales: JSON
  maritalStatus: MaritalStatusCreateNestedOneWithoutEmployeesInput
  numberOfChildren: Int!
  passportNumber: String!
  placeOfBirth: String!
  probationDate: Timestamp
  retirementDate: Timestamp
  updatedAt: Timestamp
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  none: EmployeeWhereInput
  some: EmployeeWhereInput
}

input EmployeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployeeScalarWhereInput {
  AND: [EmployeeScalarWhereInput!]
  NOT: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  Phone: StringFilter
  countryOfBirth: StringFilter
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeFilter
  deleted: BoolFilter
  email: StringFilter
  emergencyContact: StringFilter
  emergencyPhone: StringFilter
  employmentDate: DateTimeFilter
  employmentNatureId: IntNullableFilter
  employmentTypeId: IntNullableFilter
  firstName: JsonFilter
  genderId: IntNullableFilter
  grandfatherName: JsonFilter
  id: IntFilter
  idNumber: StringFilter
  lastName: JsonFilter
  locales: JsonNullableFilter
  maritalStatusId: IntNullableFilter
  nationalityId: IntNullableFilter
  numberOfChildren: IntFilter
  passportNumber: StringFilter
  placeOfBirth: StringFilter
  probationDate: DateTimeFilter
  retirementDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmployeeUpdateManyMutationInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  firstName: JSON
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateManyWithWhereWithoutEmploymentNatureInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutEmploymentTypeInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutGenderInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutMaritalStatusInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutNationalityInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithoutEmploymentNatureInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutEmploymentNatureInput!]
  create: [EmployeeCreateWithoutEmploymentNatureInput!]
  createMany: EmployeeCreateManyEmploymentNatureInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutEmploymentNatureInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutEmploymentNatureInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutEmploymentNatureInput!]
}

input EmployeeUpdateManyWithoutEmploymentTypeInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutEmploymentTypeInput!]
  create: [EmployeeCreateWithoutEmploymentTypeInput!]
  createMany: EmployeeCreateManyEmploymentTypeInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutEmploymentTypeInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutEmploymentTypeInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutEmploymentTypeInput!]
}

input EmployeeUpdateManyWithoutGenderInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutGenderInput!]
  create: [EmployeeCreateWithoutGenderInput!]
  createMany: EmployeeCreateManyGenderInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutGenderInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutGenderInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutGenderInput!]
}

input EmployeeUpdateManyWithoutMaritalStatusInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutMaritalStatusInput!]
  create: [EmployeeCreateWithoutMaritalStatusInput!]
  createMany: EmployeeCreateManyMaritalStatusInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutMaritalStatusInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutMaritalStatusInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutMaritalStatusInput!]
}

input EmployeeUpdateManyWithoutNationalityInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutNationalityInput!]
  create: [EmployeeCreateWithoutNationalityInput!]
  createMany: EmployeeCreateManyNationalityInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutNationalityInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutNationalityInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutNationalityInput!]
}

input EmployeeUpdateWithWhereUniqueWithoutEmploymentNatureInput {
  data: EmployeeUpdateWithoutEmploymentNatureInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutEmploymentTypeInput {
  data: EmployeeUpdateWithoutEmploymentTypeInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutGenderInput {
  data: EmployeeUpdateWithoutGenderInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutMaritalStatusInput {
  data: EmployeeUpdateWithoutMaritalStatusInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutNationalityInput {
  data: EmployeeUpdateWithoutNationalityInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithoutEmploymentNatureInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  employmentType: EmploymentTypeUpdateOneWithoutEmployeesInput
  firstName: JSON
  gender: GenderUpdateOneWithoutEmployeesInput
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  maritalStatus: MaritalStatusUpdateOneWithoutEmployeesInput
  nationality: NationalityUpdateOneWithoutEmployeesInput
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateWithoutEmploymentTypeInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  employmentNature: EmploymentNatureUpdateOneWithoutEmployeesInput
  firstName: JSON
  gender: GenderUpdateOneWithoutEmployeesInput
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  maritalStatus: MaritalStatusUpdateOneWithoutEmployeesInput
  nationality: NationalityUpdateOneWithoutEmployeesInput
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateWithoutGenderInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  employmentNature: EmploymentNatureUpdateOneWithoutEmployeesInput
  employmentType: EmploymentTypeUpdateOneWithoutEmployeesInput
  firstName: JSON
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  maritalStatus: MaritalStatusUpdateOneWithoutEmployeesInput
  nationality: NationalityUpdateOneWithoutEmployeesInput
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateWithoutMaritalStatusInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  employmentNature: EmploymentNatureUpdateOneWithoutEmployeesInput
  employmentType: EmploymentTypeUpdateOneWithoutEmployeesInput
  firstName: JSON
  gender: GenderUpdateOneWithoutEmployeesInput
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  nationality: NationalityUpdateOneWithoutEmployeesInput
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateWithoutNationalityInput {
  Phone: StringFieldUpdateOperationsInput
  countryOfBirth: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emergencyContact: StringFieldUpdateOperationsInput
  emergencyPhone: StringFieldUpdateOperationsInput
  employmentDate: DateTimeFieldUpdateOperationsInput
  employmentNature: EmploymentNatureUpdateOneWithoutEmployeesInput
  employmentType: EmploymentTypeUpdateOneWithoutEmployeesInput
  firstName: JSON
  gender: GenderUpdateOneWithoutEmployeesInput
  grandfatherName: JSON
  idNumber: StringFieldUpdateOperationsInput
  lastName: JSON
  locales: JSON
  maritalStatus: MaritalStatusUpdateOneWithoutEmployeesInput
  numberOfChildren: IntFieldUpdateOperationsInput
  passportNumber: StringFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  probationDate: DateTimeFieldUpdateOperationsInput
  retirementDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpsertWithWhereUniqueWithoutEmploymentNatureInput {
  create: EmployeeCreateWithoutEmploymentNatureInput!
  update: EmployeeUpdateWithoutEmploymentNatureInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutEmploymentTypeInput {
  create: EmployeeCreateWithoutEmploymentTypeInput!
  update: EmployeeUpdateWithoutEmploymentTypeInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutGenderInput {
  create: EmployeeCreateWithoutGenderInput!
  update: EmployeeUpdateWithoutGenderInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutMaritalStatusInput {
  create: EmployeeCreateWithoutMaritalStatusInput!
  update: EmployeeUpdateWithoutMaritalStatusInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutNationalityInput {
  create: EmployeeCreateWithoutNationalityInput!
  update: EmployeeUpdateWithoutNationalityInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  Phone: StringFilter
  countryOfBirth: StringFilter
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeFilter
  deleted: BoolFilter
  email: StringFilter
  emergencyContact: StringFilter
  emergencyPhone: StringFilter
  employmentDate: DateTimeFilter
  employmentNature: EmploymentNatureRelationFilter
  employmentNatureId: IntNullableFilter
  employmentType: EmploymentTypeRelationFilter
  employmentTypeId: IntNullableFilter
  firstName: JsonFilter
  gender: GenderRelationFilter
  genderId: IntNullableFilter
  grandfatherName: JsonFilter
  id: IntFilter
  idNumber: StringFilter
  lastName: JsonFilter
  locales: JsonNullableFilter
  maritalStatus: MaritalStatusRelationFilter
  maritalStatusId: IntNullableFilter
  nationality: NationalityRelationFilter
  nationalityId: IntNullableFilter
  numberOfChildren: IntFilter
  passportNumber: StringFilter
  placeOfBirth: StringFilter
  probationDate: DateTimeFilter
  retirementDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmployeeWhereUniqueInput {
  id: Int!
}

type EmploymentNature {
  _count: EmploymentNatureCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  employees: [Employee!]
  id: ID!
  locales: JSON
  name: String!
  updatedAt: Timestamp!
}

type EmploymentNatureAvgAggregate {
  id: Float
}

type EmploymentNatureCount {
  employees: Int!
}

type EmploymentNatureCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input EmploymentNatureCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutEmploymentNatureInput
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

input EmploymentNatureCreateNestedOneWithoutEmployeesInput {
  connect: EmploymentNatureWhereUniqueInput
  connectOrCreate: EmploymentNatureCreateOrConnectWithoutEmployeesInput
  create: EmploymentNatureCreateWithoutEmployeesInput
}

input EmploymentNatureCreateOrConnectWithoutEmployeesInput {
  create: EmploymentNatureCreateWithoutEmployeesInput!
  where: EmploymentNatureWhereUniqueInput!
}

input EmploymentNatureCreateWithoutEmployeesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type EmploymentNatureEdge {
  cursor: String!
  node: EmploymentNature!
}

type EmploymentNatureMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type EmploymentNatureMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input EmploymentNatureOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input EmploymentNatureRelationFilter {
  is: EmploymentNatureWhereInput
  isNot: EmploymentNatureWhereInput
}

enum EmploymentNatureScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type EmploymentNatureSumAggregate {
  id: Int
}

input EmploymentNatureUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutEmploymentNatureInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmploymentNatureUpdateOneWithoutEmployeesInput {
  connect: EmploymentNatureWhereUniqueInput
  connectOrCreate: EmploymentNatureCreateOrConnectWithoutEmployeesInput
  create: EmploymentNatureCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: EmploymentNatureUpdateWithoutEmployeesInput
  upsert: EmploymentNatureUpsertWithoutEmployeesInput
}

input EmploymentNatureUpdateWithoutEmployeesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmploymentNatureUpsertWithoutEmployeesInput {
  create: EmploymentNatureCreateWithoutEmployeesInput!
  update: EmploymentNatureUpdateWithoutEmployeesInput!
}

input EmploymentNatureWhereInput {
  AND: [EmploymentNatureWhereInput!]
  NOT: [EmploymentNatureWhereInput!]
  OR: [EmploymentNatureWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  employees: EmployeeListRelationFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input EmploymentNatureWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type EmploymentType {
  _count: EmploymentTypeCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  employees: [Employee!]
  id: ID!
  locales: JSON
  name: String!
  updatedAt: Timestamp!
}

type EmploymentTypeAvgAggregate {
  id: Float
}

type EmploymentTypeCount {
  employees: Int!
}

type EmploymentTypeCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input EmploymentTypeCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutEmploymentTypeInput
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

input EmploymentTypeCreateNestedOneWithoutEmployeesInput {
  connect: EmploymentTypeWhereUniqueInput
  connectOrCreate: EmploymentTypeCreateOrConnectWithoutEmployeesInput
  create: EmploymentTypeCreateWithoutEmployeesInput
}

input EmploymentTypeCreateOrConnectWithoutEmployeesInput {
  create: EmploymentTypeCreateWithoutEmployeesInput!
  where: EmploymentTypeWhereUniqueInput!
}

input EmploymentTypeCreateWithoutEmployeesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type EmploymentTypeEdge {
  cursor: String!
  node: EmploymentType!
}

type EmploymentTypeMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type EmploymentTypeMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input EmploymentTypeOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input EmploymentTypeRelationFilter {
  is: EmploymentTypeWhereInput
  isNot: EmploymentTypeWhereInput
}

enum EmploymentTypeScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type EmploymentTypeSumAggregate {
  id: Int
}

input EmploymentTypeUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutEmploymentTypeInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmploymentTypeUpdateOneWithoutEmployeesInput {
  connect: EmploymentTypeWhereUniqueInput
  connectOrCreate: EmploymentTypeCreateOrConnectWithoutEmployeesInput
  create: EmploymentTypeCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: EmploymentTypeUpdateWithoutEmployeesInput
  upsert: EmploymentTypeUpsertWithoutEmployeesInput
}

input EmploymentTypeUpdateWithoutEmployeesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmploymentTypeUpsertWithoutEmployeesInput {
  create: EmploymentTypeCreateWithoutEmployeesInput!
  update: EmploymentTypeUpdateWithoutEmployeesInput!
}

input EmploymentTypeWhereInput {
  AND: [EmploymentTypeWhereInput!]
  NOT: [EmploymentTypeWhereInput!]
  OR: [EmploymentTypeWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  employees: EmployeeListRelationFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input EmploymentTypeWhereUniqueInput {
  code: String
  id: Int
  name: String
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Gender {
  _count: GenderCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  employees: [Employee!]
  id: ID!
  locales: JSON
  name: String!
  positionClasses: [PositionClass!]
  updatedAt: Timestamp!
}

type GenderAvgAggregate {
  id: Float
}

type GenderCount {
  employees: Int!
  positionClasses: Int!
}

type GenderCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input GenderCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutGenderInput
  locales: JSON
  name: String!
  positionClasses: PositionClassCreateNestedManyWithoutGenderInput
  updatedAt: Timestamp
}

input GenderCreateNestedOneWithoutEmployeesInput {
  connect: GenderWhereUniqueInput
  connectOrCreate: GenderCreateOrConnectWithoutEmployeesInput
  create: GenderCreateWithoutEmployeesInput
}

input GenderCreateNestedOneWithoutPositionClassesInput {
  connect: GenderWhereUniqueInput
  connectOrCreate: GenderCreateOrConnectWithoutPositionClassesInput
  create: GenderCreateWithoutPositionClassesInput
}

input GenderCreateOrConnectWithoutEmployeesInput {
  create: GenderCreateWithoutEmployeesInput!
  where: GenderWhereUniqueInput!
}

input GenderCreateOrConnectWithoutPositionClassesInput {
  create: GenderCreateWithoutPositionClassesInput!
  where: GenderWhereUniqueInput!
}

input GenderCreateWithoutEmployeesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  positionClasses: PositionClassCreateNestedManyWithoutGenderInput
  updatedAt: Timestamp
}

input GenderCreateWithoutPositionClassesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutGenderInput
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type GenderEdge {
  cursor: String!
  node: Gender!
}

type GenderMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type GenderMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input GenderOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  positionClasses: PositionClassOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input GenderRelationFilter {
  is: GenderWhereInput
  isNot: GenderWhereInput
}

enum GenderScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type GenderSumAggregate {
  id: Int
}

input GenderUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutGenderInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  positionClasses: PositionClassUpdateManyWithoutGenderInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenderUpdateOneWithoutEmployeesInput {
  connect: GenderWhereUniqueInput
  connectOrCreate: GenderCreateOrConnectWithoutEmployeesInput
  create: GenderCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: GenderUpdateWithoutEmployeesInput
  upsert: GenderUpsertWithoutEmployeesInput
}

input GenderUpdateOneWithoutPositionClassesInput {
  connect: GenderWhereUniqueInput
  connectOrCreate: GenderCreateOrConnectWithoutPositionClassesInput
  create: GenderCreateWithoutPositionClassesInput
  delete: Boolean
  disconnect: Boolean
  update: GenderUpdateWithoutPositionClassesInput
  upsert: GenderUpsertWithoutPositionClassesInput
}

input GenderUpdateWithoutEmployeesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  positionClasses: PositionClassUpdateManyWithoutGenderInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenderUpdateWithoutPositionClassesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutGenderInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenderUpsertWithoutEmployeesInput {
  create: GenderCreateWithoutEmployeesInput!
  update: GenderUpdateWithoutEmployeesInput!
}

input GenderUpsertWithoutPositionClassesInput {
  create: GenderCreateWithoutPositionClassesInput!
  update: GenderUpdateWithoutPositionClassesInput!
}

input GenderWhereInput {
  AND: [GenderWhereInput!]
  NOT: [GenderWhereInput!]
  OR: [GenderWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  employees: EmployeeListRelationFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  positionClasses: PositionClassListRelationFilter
  updatedAt: DateTimeFilter
}

input GenderWhereUniqueInput {
  code: String
  id: Int
  name: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JobGrade {
  _count: JobGradeCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  id: ID!
  locales: JSON
  name: String!
  salaryScales: [SalaryScale!]
  updatedAt: Timestamp!
}

type JobGradeAvgAggregate {
  id: Float
}

type JobGradeCount {
  salaryScales: Int!
}

type JobGradeCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input JobGradeCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  salaryScales: SalaryScaleCreateNestedManyWithoutJobGradeInput
  updatedAt: Timestamp
}

input JobGradeCreateNestedOneWithoutSalaryScalesInput {
  connect: JobGradeWhereUniqueInput
  connectOrCreate: JobGradeCreateOrConnectWithoutSalaryScalesInput
  create: JobGradeCreateWithoutSalaryScalesInput
}

input JobGradeCreateOrConnectWithoutSalaryScalesInput {
  create: JobGradeCreateWithoutSalaryScalesInput!
  where: JobGradeWhereUniqueInput!
}

input JobGradeCreateWithoutSalaryScalesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type JobGradeEdge {
  cursor: String!
  node: JobGrade!
}

type JobGradeMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type JobGradeMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input JobGradeOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  salaryScales: SalaryScaleOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input JobGradeRelationFilter {
  is: JobGradeWhereInput
  isNot: JobGradeWhereInput
}

enum JobGradeScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type JobGradeSumAggregate {
  id: Int
}

input JobGradeUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  salaryScales: SalaryScaleUpdateManyWithoutJobGradeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JobGradeUpdateOneWithoutSalaryScalesInput {
  connect: JobGradeWhereUniqueInput
  connectOrCreate: JobGradeCreateOrConnectWithoutSalaryScalesInput
  create: JobGradeCreateWithoutSalaryScalesInput
  delete: Boolean
  disconnect: Boolean
  update: JobGradeUpdateWithoutSalaryScalesInput
  upsert: JobGradeUpsertWithoutSalaryScalesInput
}

input JobGradeUpdateWithoutSalaryScalesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JobGradeUpsertWithoutSalaryScalesInput {
  create: JobGradeCreateWithoutSalaryScalesInput!
  update: JobGradeUpdateWithoutSalaryScalesInput!
}

input JobGradeWhereInput {
  AND: [JobGradeWhereInput!]
  NOT: [JobGradeWhereInput!]
  OR: [JobGradeWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  salaryScales: SalaryScaleListRelationFilter
  updatedAt: DateTimeFilter
}

input JobGradeWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type JobStep {
  _count: JobStepCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  id: ID!
  locales: JSON
  name: String!
  salaryScales: [SalaryScale!]
  updatedAt: Timestamp!
}

type JobStepAvgAggregate {
  id: Float
}

type JobStepCount {
  salaryScales: Int!
}

type JobStepCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input JobStepCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  salaryScales: SalaryScaleCreateNestedManyWithoutJobStepInput
  updatedAt: Timestamp
}

input JobStepCreateNestedOneWithoutSalaryScalesInput {
  connect: JobStepWhereUniqueInput
  connectOrCreate: JobStepCreateOrConnectWithoutSalaryScalesInput
  create: JobStepCreateWithoutSalaryScalesInput
}

input JobStepCreateOrConnectWithoutSalaryScalesInput {
  create: JobStepCreateWithoutSalaryScalesInput!
  where: JobStepWhereUniqueInput!
}

input JobStepCreateWithoutSalaryScalesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type JobStepEdge {
  cursor: String!
  node: JobStep!
}

type JobStepMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type JobStepMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input JobStepOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  salaryScales: SalaryScaleOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input JobStepRelationFilter {
  is: JobStepWhereInput
  isNot: JobStepWhereInput
}

enum JobStepScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type JobStepSumAggregate {
  id: Int
}

input JobStepUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  salaryScales: SalaryScaleUpdateManyWithoutJobStepInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JobStepUpdateOneWithoutSalaryScalesInput {
  connect: JobStepWhereUniqueInput
  connectOrCreate: JobStepCreateOrConnectWithoutSalaryScalesInput
  create: JobStepCreateWithoutSalaryScalesInput
  delete: Boolean
  disconnect: Boolean
  update: JobStepUpdateWithoutSalaryScalesInput
  upsert: JobStepUpsertWithoutSalaryScalesInput
}

input JobStepUpdateWithoutSalaryScalesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JobStepUpsertWithoutSalaryScalesInput {
  create: JobStepCreateWithoutSalaryScalesInput!
  update: JobStepUpdateWithoutSalaryScalesInput!
}

input JobStepWhereInput {
  AND: [JobStepWhereInput!]
  NOT: [JobStepWhereInput!]
  OR: [JobStepWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  salaryScales: SalaryScaleListRelationFilter
  updatedAt: DateTimeFilter
}

input JobStepWhereUniqueInput {
  code: String
  id: Int
  name: String
}

input JsonFilter {
  equals: JSON
  not: JSON
}

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

type MaritalStatus {
  _count: MaritalStatusCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  employees: [Employee!]
  id: ID!
  locales: JSON
  name: String!
  updatedAt: Timestamp!
}

type MaritalStatusAvgAggregate {
  id: Float
}

type MaritalStatusCount {
  employees: Int!
}

type MaritalStatusCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input MaritalStatusCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutMaritalStatusInput
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

input MaritalStatusCreateNestedOneWithoutEmployeesInput {
  connect: MaritalStatusWhereUniqueInput
  connectOrCreate: MaritalStatusCreateOrConnectWithoutEmployeesInput
  create: MaritalStatusCreateWithoutEmployeesInput
}

input MaritalStatusCreateOrConnectWithoutEmployeesInput {
  create: MaritalStatusCreateWithoutEmployeesInput!
  where: MaritalStatusWhereUniqueInput!
}

input MaritalStatusCreateWithoutEmployeesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type MaritalStatusEdge {
  cursor: String!
  node: MaritalStatus!
}

type MaritalStatusMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type MaritalStatusMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input MaritalStatusOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MaritalStatusRelationFilter {
  is: MaritalStatusWhereInput
  isNot: MaritalStatusWhereInput
}

enum MaritalStatusScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type MaritalStatusSumAggregate {
  id: Int
}

input MaritalStatusUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutMaritalStatusInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MaritalStatusUpdateOneWithoutEmployeesInput {
  connect: MaritalStatusWhereUniqueInput
  connectOrCreate: MaritalStatusCreateOrConnectWithoutEmployeesInput
  create: MaritalStatusCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: MaritalStatusUpdateWithoutEmployeesInput
  upsert: MaritalStatusUpsertWithoutEmployeesInput
}

input MaritalStatusUpdateWithoutEmployeesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MaritalStatusUpsertWithoutEmployeesInput {
  create: MaritalStatusCreateWithoutEmployeesInput!
  update: MaritalStatusUpdateWithoutEmployeesInput!
}

input MaritalStatusWhereInput {
  AND: [MaritalStatusWhereInput!]
  NOT: [MaritalStatusWhereInput!]
  OR: [MaritalStatusWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  employees: EmployeeListRelationFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MaritalStatusWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type Mutation {
  createDepartment(data: DepartmentCreateInput!): Department!
  createEmploymentNature(data: EmploymentNatureCreateInput!): EmploymentNature!
  createEmploymentType(data: EmploymentTypeCreateInput!): EmploymentType!
  createGender(data: GenderCreateInput!): Gender!
  createJobGrade(data: JobGradeCreateInput!): JobGrade!
  createJobStep(data: JobStepCreateInput!): JobStep!
  createMaritalStatus(data: MaritalStatusCreateInput!): MaritalStatus!
  createNationality(data: NationalityCreateInput!): Nationality!
  createPosition(data: PositionCreateInput!): Position!
  createPositionClass(data: PositionClassCreateInput!): PositionClass!
  createPositionClassCategory(data: PositionClassCategoryCreateInput!): PositionClassCategory!
  createPositionClassType(data: PositionClassTypeCreateInput!): PositionClassType!
  createSalaryScale(data: SalaryScaleCreateInput!): SalaryScale!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department!
  deleteEmploymentNature(where: EmploymentNatureWhereUniqueInput!): EmploymentNature!
  deleteEmploymentType(where: EmploymentTypeWhereUniqueInput!): EmploymentType!
  deleteGender(where: GenderWhereUniqueInput!): Gender!
  deleteJobGrade(where: JobGradeWhereUniqueInput!): JobGrade!
  deleteJobStep(where: JobStepWhereUniqueInput!): JobStep!
  deleteMaritalStatus(where: MaritalStatusWhereUniqueInput!): MaritalStatus!
  deleteNationality(where: NationalityWhereUniqueInput!): Nationality!
  deletePosition(where: PositionWhereUniqueInput!): Position!
  deletePositionClass(where: PositionClassWhereUniqueInput!): PositionClass!
  deletePositionClassCategory(where: PositionClassCategoryWhereUniqueInput!): PositionClassCategory!
  deletePositionClassType(where: PositionClassTypeWhereUniqueInput!): PositionClassType!
  deleteSalaryScale(where: SalaryScaleWhereUniqueInput!): SalaryScale!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department!
  updateEmploymentNature(data: EmploymentNatureUpdateInput!, where: EmploymentNatureWhereUniqueInput!): EmploymentNature!
  updateEmploymentType(data: EmploymentTypeUpdateInput!, where: EmploymentTypeWhereUniqueInput!): EmploymentType!
  updateGender(data: GenderUpdateInput!, where: GenderWhereUniqueInput!): Gender!
  updateJobGrade(data: JobGradeUpdateInput!, where: JobGradeWhereUniqueInput!): JobGrade!
  updateJobStep(data: JobStepUpdateInput!, where: JobStepWhereUniqueInput!): JobStep!
  updateMaritalStatus(data: MaritalStatusUpdateInput!, where: MaritalStatusWhereUniqueInput!): MaritalStatus!
  updateNationality(data: NationalityUpdateInput!, where: NationalityWhereUniqueInput!): Nationality!
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position!
  updatePositionClass(data: PositionClassUpdateInput!, where: PositionClassWhereUniqueInput!): PositionClass!
  updatePositionClassCategory(data: PositionClassCategoryUpdateInput!, where: PositionClassCategoryWhereUniqueInput!): PositionClassCategory!
  updatePositionClassType(data: PositionClassTypeUpdateInput!, where: PositionClassTypeWhereUniqueInput!): PositionClassType!
  updateSalaryScale(data: SalaryScaleUpdateInput!, where: SalaryScaleWhereUniqueInput!): SalaryScale!
}

type Nationality {
  _count: NationalityCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  employees: [Employee!]
  id: ID!
  locales: JSON
  name: String!
  updatedAt: Timestamp!
}

type NationalityAvgAggregate {
  id: Float
}

type NationalityCount {
  employees: Int!
}

type NationalityCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input NationalityCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  employees: EmployeeCreateNestedManyWithoutNationalityInput
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

input NationalityCreateNestedOneWithoutEmployeesInput {
  connect: NationalityWhereUniqueInput
  connectOrCreate: NationalityCreateOrConnectWithoutEmployeesInput
  create: NationalityCreateWithoutEmployeesInput
}

input NationalityCreateOrConnectWithoutEmployeesInput {
  create: NationalityCreateWithoutEmployeesInput!
  where: NationalityWhereUniqueInput!
}

input NationalityCreateWithoutEmployeesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type NationalityEdge {
  cursor: String!
  node: Nationality!
}

type NationalityMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type NationalityMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input NationalityOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input NationalityRelationFilter {
  is: NationalityWhereInput
  isNot: NationalityWhereInput
}

enum NationalityScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type NationalitySumAggregate {
  id: Int
}

input NationalityUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutNationalityInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NationalityUpdateOneWithoutEmployeesInput {
  connect: NationalityWhereUniqueInput
  connectOrCreate: NationalityCreateOrConnectWithoutEmployeesInput
  create: NationalityCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: NationalityUpdateWithoutEmployeesInput
  upsert: NationalityUpsertWithoutEmployeesInput
}

input NationalityUpdateWithoutEmployeesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NationalityUpsertWithoutEmployeesInput {
  create: NationalityCreateWithoutEmployeesInput!
  update: NationalityUpdateWithoutEmployeesInput!
}

input NationalityWhereInput {
  AND: [NationalityWhereInput!]
  NOT: [NationalityWhereInput!]
  OR: [NationalityWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  employees: EmployeeListRelationFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input NationalityWhereUniqueInput {
  code: String
  id: Int
  name: String
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type PaginatedDepartment {
  edges: [DepartmentEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [Department!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedEmploymentNature {
  edges: [EmploymentNatureEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [EmploymentNature!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedEmploymentType {
  edges: [EmploymentTypeEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [EmploymentType!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedGender {
  edges: [GenderEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [Gender!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedJobGrade {
  edges: [JobGradeEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [JobGrade!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedJobStep {
  edges: [JobStepEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [JobStep!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedMaritalStatus {
  edges: [MaritalStatusEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [MaritalStatus!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedNationality {
  edges: [NationalityEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [Nationality!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedPosition {
  edges: [PositionEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [Position!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedPositionClass {
  edges: [PositionClassEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [PositionClass!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedPositionClassCategory {
  edges: [PositionClassCategoryEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [PositionClassCategory!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedPositionClassType {
  edges: [PositionClassTypeEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [PositionClassType!]!
  startCursor: Int!
  totalCount: Int!
}

type PaginatedSalaryScale {
  edges: [SalaryScaleEdge!]!
  endCursor: Int!
  hasNextPage: Boolean!
  nodes: [SalaryScale!]!
  startCursor: Int!
  totalCount: Int!
}

type Position {
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  department: Department
  departmentId: Int
  id: ID!
  positionClass: PositionClass
  positionClassId: Int
  updatedAt: Timestamp!
  vacant: Boolean!
}

type PositionAvgAggregate {
  departmentId: Float
  id: Float
  positionClassId: Float
}

type PositionClass {
  _count: PositionClassCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  gender: Gender
  genderId: Int
  id: ID!
  locales: JSON
  maximumAge: Int!
  minimumAge: Int!
  monthlyWorkingHours: Decimal!
  name: String!
  positionClassCategory: PositionClassCategory
  positionClassCategoryId: Int
  positionClassType: PositionClassType
  positionClassTypeId: Int
  positions: [Position!]
  salary: Decimal!
  salaryScale: SalaryScale
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp!
}

type PositionClassAvgAggregate {
  genderId: Float
  id: Float
  maximumAge: Float
  minimumAge: Float
  monthlyWorkingHours: Decimal
  positionClassCategoryId: Float
  positionClassTypeId: Float
  salary: Decimal
  salaryScaleId: Float
}

type PositionClassCategory {
  _count: PositionClassCategoryCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  id: ID!
  locales: JSON
  name: String!
  positionClasses: [PositionClass!]
  updatedAt: Timestamp!
}

type PositionClassCategoryAvgAggregate {
  id: Float
}

type PositionClassCategoryCount {
  positionClasses: Int!
}

type PositionClassCategoryCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input PositionClassCategoryCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  positionClasses: PositionClassCreateNestedManyWithoutPositionClassCategoryInput
  updatedAt: Timestamp
}

input PositionClassCategoryCreateNestedOneWithoutPositionClassesInput {
  connect: PositionClassCategoryWhereUniqueInput
  connectOrCreate: PositionClassCategoryCreateOrConnectWithoutPositionClassesInput
  create: PositionClassCategoryCreateWithoutPositionClassesInput
}

input PositionClassCategoryCreateOrConnectWithoutPositionClassesInput {
  create: PositionClassCategoryCreateWithoutPositionClassesInput!
  where: PositionClassCategoryWhereUniqueInput!
}

input PositionClassCategoryCreateWithoutPositionClassesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type PositionClassCategoryEdge {
  cursor: String!
  node: PositionClassCategory!
}

type PositionClassCategoryMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type PositionClassCategoryMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input PositionClassCategoryOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  positionClasses: PositionClassOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input PositionClassCategoryRelationFilter {
  is: PositionClassCategoryWhereInput
  isNot: PositionClassCategoryWhereInput
}

enum PositionClassCategoryScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type PositionClassCategorySumAggregate {
  id: Int
}

input PositionClassCategoryUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  positionClasses: PositionClassUpdateManyWithoutPositionClassCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassCategoryUpdateOneWithoutPositionClassesInput {
  connect: PositionClassCategoryWhereUniqueInput
  connectOrCreate: PositionClassCategoryCreateOrConnectWithoutPositionClassesInput
  create: PositionClassCategoryCreateWithoutPositionClassesInput
  delete: Boolean
  disconnect: Boolean
  update: PositionClassCategoryUpdateWithoutPositionClassesInput
  upsert: PositionClassCategoryUpsertWithoutPositionClassesInput
}

input PositionClassCategoryUpdateWithoutPositionClassesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassCategoryUpsertWithoutPositionClassesInput {
  create: PositionClassCategoryCreateWithoutPositionClassesInput!
  update: PositionClassCategoryUpdateWithoutPositionClassesInput!
}

input PositionClassCategoryWhereInput {
  AND: [PositionClassCategoryWhereInput!]
  NOT: [PositionClassCategoryWhereInput!]
  OR: [PositionClassCategoryWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  positionClasses: PositionClassListRelationFilter
  updatedAt: DateTimeFilter
}

input PositionClassCategoryWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type PositionClassCount {
  positions: Int!
}

type PositionClassCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  genderId: Int!
  id: Int!
  locales: Int!
  maximumAge: Int!
  minimumAge: Int!
  monthlyWorkingHours: Int!
  name: Int!
  positionClassCategoryId: Int!
  positionClassTypeId: Int!
  salary: Int!
  salaryScaleId: Int!
  specification: Int!
  updatedAt: Int!
}

input PositionClassCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  gender: GenderCreateNestedOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategory: PositionClassCategoryCreateNestedOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeCreateNestedOneWithoutPositionClassesInput
  positions: PositionCreateNestedManyWithoutPositionClassInput
  salary: Decimal
  salaryScale: SalaryScaleCreateNestedOneWithoutPositionClassesInput
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateManyGenderInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategoryId: Int
  positionClassTypeId: Int
  salary: Decimal
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateManyGenderInputEnvelope {
  data: [PositionClassCreateManyGenderInput!]!
  skipDuplicates: Boolean
}

input PositionClassCreateManyPositionClassCategoryInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  genderId: Int
  id: Int
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassTypeId: Int
  salary: Decimal
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateManyPositionClassCategoryInputEnvelope {
  data: [PositionClassCreateManyPositionClassCategoryInput!]!
  skipDuplicates: Boolean
}

input PositionClassCreateManyPositionClassTypeInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  genderId: Int
  id: Int
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategoryId: Int
  salary: Decimal
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateManyPositionClassTypeInputEnvelope {
  data: [PositionClassCreateManyPositionClassTypeInput!]!
  skipDuplicates: Boolean
}

input PositionClassCreateManySalaryScaleInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  genderId: Int
  id: Int
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategoryId: Int
  positionClassTypeId: Int
  salary: Decimal
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateManySalaryScaleInputEnvelope {
  data: [PositionClassCreateManySalaryScaleInput!]!
  skipDuplicates: Boolean
}

input PositionClassCreateNestedManyWithoutGenderInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutGenderInput!]
  create: [PositionClassCreateWithoutGenderInput!]
  createMany: PositionClassCreateManyGenderInputEnvelope
}

input PositionClassCreateNestedManyWithoutPositionClassCategoryInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutPositionClassCategoryInput!]
  create: [PositionClassCreateWithoutPositionClassCategoryInput!]
  createMany: PositionClassCreateManyPositionClassCategoryInputEnvelope
}

input PositionClassCreateNestedManyWithoutPositionClassTypeInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutPositionClassTypeInput!]
  create: [PositionClassCreateWithoutPositionClassTypeInput!]
  createMany: PositionClassCreateManyPositionClassTypeInputEnvelope
}

input PositionClassCreateNestedManyWithoutSalaryScaleInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutSalaryScaleInput!]
  create: [PositionClassCreateWithoutSalaryScaleInput!]
  createMany: PositionClassCreateManySalaryScaleInputEnvelope
}

input PositionClassCreateNestedOneWithoutPositionsInput {
  connect: PositionClassWhereUniqueInput
  connectOrCreate: PositionClassCreateOrConnectWithoutPositionsInput
  create: PositionClassCreateWithoutPositionsInput
}

input PositionClassCreateOrConnectWithoutGenderInput {
  create: PositionClassCreateWithoutGenderInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassCreateOrConnectWithoutPositionClassCategoryInput {
  create: PositionClassCreateWithoutPositionClassCategoryInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassCreateOrConnectWithoutPositionClassTypeInput {
  create: PositionClassCreateWithoutPositionClassTypeInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassCreateOrConnectWithoutPositionsInput {
  create: PositionClassCreateWithoutPositionsInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassCreateOrConnectWithoutSalaryScaleInput {
  create: PositionClassCreateWithoutSalaryScaleInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassCreateWithoutGenderInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategory: PositionClassCategoryCreateNestedOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeCreateNestedOneWithoutPositionClassesInput
  positions: PositionCreateNestedManyWithoutPositionClassInput
  salary: Decimal
  salaryScale: SalaryScaleCreateNestedOneWithoutPositionClassesInput
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateWithoutPositionClassCategoryInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  gender: GenderCreateNestedOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassType: PositionClassTypeCreateNestedOneWithoutPositionClassesInput
  positions: PositionCreateNestedManyWithoutPositionClassInput
  salary: Decimal
  salaryScale: SalaryScaleCreateNestedOneWithoutPositionClassesInput
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateWithoutPositionClassTypeInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  gender: GenderCreateNestedOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategory: PositionClassCategoryCreateNestedOneWithoutPositionClassesInput
  positions: PositionCreateNestedManyWithoutPositionClassInput
  salary: Decimal
  salaryScale: SalaryScaleCreateNestedOneWithoutPositionClassesInput
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateWithoutPositionsInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  gender: GenderCreateNestedOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategory: PositionClassCategoryCreateNestedOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeCreateNestedOneWithoutPositionClassesInput
  salary: Decimal
  salaryScale: SalaryScaleCreateNestedOneWithoutPositionClassesInput
  specification: String
  updatedAt: Timestamp
}

input PositionClassCreateWithoutSalaryScaleInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  gender: GenderCreateNestedOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String!
  positionClassCategory: PositionClassCategoryCreateNestedOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeCreateNestedOneWithoutPositionClassesInput
  positions: PositionCreateNestedManyWithoutPositionClassInput
  salary: Decimal
  specification: String
  updatedAt: Timestamp
}

type PositionClassEdge {
  cursor: String!
  node: PositionClass!
}

input PositionClassListRelationFilter {
  every: PositionClassWhereInput
  none: PositionClassWhereInput
  some: PositionClassWhereInput
}

type PositionClassMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  genderId: Int
  id: Int
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String
  positionClassCategoryId: Int
  positionClassTypeId: Int
  salary: Decimal
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp
}

type PositionClassMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  genderId: Int
  id: Int
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  name: String
  positionClassCategoryId: Int
  positionClassTypeId: Int
  salary: Decimal
  salaryScaleId: Int
  specification: String
  updatedAt: Timestamp
}

input PositionClassOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionClassOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  gender: GenderOrderByWithRelationInput
  genderId: SortOrder
  id: SortOrder
  locales: SortOrder
  maximumAge: SortOrder
  minimumAge: SortOrder
  monthlyWorkingHours: SortOrder
  name: SortOrder
  positionClassCategory: PositionClassCategoryOrderByWithRelationInput
  positionClassCategoryId: SortOrder
  positionClassType: PositionClassTypeOrderByWithRelationInput
  positionClassTypeId: SortOrder
  positions: PositionOrderByRelationAggregateInput
  salary: SortOrder
  salaryScale: SalaryScaleOrderByWithRelationInput
  salaryScaleId: SortOrder
  specification: SortOrder
  updatedAt: SortOrder
}

input PositionClassRelationFilter {
  is: PositionClassWhereInput
  isNot: PositionClassWhereInput
}

enum PositionClassScalarFieldEnum {
  code
  createdAt
  deleted
  genderId
  id
  locales
  maximumAge
  minimumAge
  monthlyWorkingHours
  name
  positionClassCategoryId
  positionClassTypeId
  salary
  salaryScaleId
  specification
  updatedAt
}

input PositionClassScalarWhereInput {
  AND: [PositionClassScalarWhereInput!]
  NOT: [PositionClassScalarWhereInput!]
  OR: [PositionClassScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  genderId: IntNullableFilter
  id: IntFilter
  locales: JsonNullableFilter
  maximumAge: IntFilter
  minimumAge: IntFilter
  monthlyWorkingHours: DecimalFilter
  name: StringFilter
  positionClassCategoryId: IntNullableFilter
  positionClassTypeId: IntNullableFilter
  salary: DecimalFilter
  salaryScaleId: IntNullableFilter
  specification: StringNullableFilter
  updatedAt: DateTimeFilter
}

type PositionClassSumAggregate {
  genderId: Int
  id: Int
  maximumAge: Int
  minimumAge: Int
  monthlyWorkingHours: Decimal
  positionClassCategoryId: Int
  positionClassTypeId: Int
  salary: Decimal
  salaryScaleId: Int
}

type PositionClassType {
  _count: PositionClassTypeCount
  code: String!
  createdAt: Timestamp!
  deleted: Boolean!
  id: ID!
  locales: JSON
  name: String!
  positionClasses: [PositionClass!]
  updatedAt: Timestamp!
}

type PositionClassTypeAvgAggregate {
  id: Float
}

type PositionClassTypeCount {
  positionClasses: Int!
}

type PositionClassTypeCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  locales: Int!
  name: Int!
  updatedAt: Int!
}

input PositionClassTypeCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  positionClasses: PositionClassCreateNestedManyWithoutPositionClassTypeInput
  updatedAt: Timestamp
}

input PositionClassTypeCreateNestedOneWithoutPositionClassesInput {
  connect: PositionClassTypeWhereUniqueInput
  connectOrCreate: PositionClassTypeCreateOrConnectWithoutPositionClassesInput
  create: PositionClassTypeCreateWithoutPositionClassesInput
}

input PositionClassTypeCreateOrConnectWithoutPositionClassesInput {
  create: PositionClassTypeCreateWithoutPositionClassesInput!
  where: PositionClassTypeWhereUniqueInput!
}

input PositionClassTypeCreateWithoutPositionClassesInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  locales: JSON
  name: String!
  updatedAt: Timestamp
}

type PositionClassTypeEdge {
  cursor: String!
  node: PositionClassType!
}

type PositionClassTypeMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

type PositionClassTypeMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  name: String
  updatedAt: Timestamp
}

input PositionClassTypeOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  locales: SortOrder
  name: SortOrder
  positionClasses: PositionClassOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input PositionClassTypeRelationFilter {
  is: PositionClassTypeWhereInput
  isNot: PositionClassTypeWhereInput
}

enum PositionClassTypeScalarFieldEnum {
  code
  createdAt
  deleted
  id
  locales
  name
  updatedAt
}

type PositionClassTypeSumAggregate {
  id: Int
}

input PositionClassTypeUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  positionClasses: PositionClassUpdateManyWithoutPositionClassTypeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassTypeUpdateOneWithoutPositionClassesInput {
  connect: PositionClassTypeWhereUniqueInput
  connectOrCreate: PositionClassTypeCreateOrConnectWithoutPositionClassesInput
  create: PositionClassTypeCreateWithoutPositionClassesInput
  delete: Boolean
  disconnect: Boolean
  update: PositionClassTypeUpdateWithoutPositionClassesInput
  upsert: PositionClassTypeUpsertWithoutPositionClassesInput
}

input PositionClassTypeUpdateWithoutPositionClassesInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassTypeUpsertWithoutPositionClassesInput {
  create: PositionClassTypeCreateWithoutPositionClassesInput!
  update: PositionClassTypeUpdateWithoutPositionClassesInput!
}

input PositionClassTypeWhereInput {
  AND: [PositionClassTypeWhereInput!]
  NOT: [PositionClassTypeWhereInput!]
  OR: [PositionClassTypeWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  locales: JsonNullableFilter
  name: StringFilter
  positionClasses: PositionClassListRelationFilter
  updatedAt: DateTimeFilter
}

input PositionClassTypeWhereUniqueInput {
  code: String
  id: Int
  name: String
}

input PositionClassUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  gender: GenderUpdateOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassCategory: PositionClassCategoryUpdateOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeUpdateOneWithoutPositionClassesInput
  positions: PositionUpdateManyWithoutPositionClassInput
  salary: DecimalFieldUpdateOperationsInput
  salaryScale: SalaryScaleUpdateOneWithoutPositionClassesInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  salary: DecimalFieldUpdateOperationsInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateManyWithWhereWithoutGenderInput {
  data: PositionClassUpdateManyMutationInput!
  where: PositionClassScalarWhereInput!
}

input PositionClassUpdateManyWithWhereWithoutPositionClassCategoryInput {
  data: PositionClassUpdateManyMutationInput!
  where: PositionClassScalarWhereInput!
}

input PositionClassUpdateManyWithWhereWithoutPositionClassTypeInput {
  data: PositionClassUpdateManyMutationInput!
  where: PositionClassScalarWhereInput!
}

input PositionClassUpdateManyWithWhereWithoutSalaryScaleInput {
  data: PositionClassUpdateManyMutationInput!
  where: PositionClassScalarWhereInput!
}

input PositionClassUpdateManyWithoutGenderInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutGenderInput!]
  create: [PositionClassCreateWithoutGenderInput!]
  createMany: PositionClassCreateManyGenderInputEnvelope
  delete: [PositionClassWhereUniqueInput!]
  deleteMany: [PositionClassScalarWhereInput!]
  disconnect: [PositionClassWhereUniqueInput!]
  set: [PositionClassWhereUniqueInput!]
  update: [PositionClassUpdateWithWhereUniqueWithoutGenderInput!]
  updateMany: [PositionClassUpdateManyWithWhereWithoutGenderInput!]
  upsert: [PositionClassUpsertWithWhereUniqueWithoutGenderInput!]
}

input PositionClassUpdateManyWithoutPositionClassCategoryInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutPositionClassCategoryInput!]
  create: [PositionClassCreateWithoutPositionClassCategoryInput!]
  createMany: PositionClassCreateManyPositionClassCategoryInputEnvelope
  delete: [PositionClassWhereUniqueInput!]
  deleteMany: [PositionClassScalarWhereInput!]
  disconnect: [PositionClassWhereUniqueInput!]
  set: [PositionClassWhereUniqueInput!]
  update: [PositionClassUpdateWithWhereUniqueWithoutPositionClassCategoryInput!]
  updateMany: [PositionClassUpdateManyWithWhereWithoutPositionClassCategoryInput!]
  upsert: [PositionClassUpsertWithWhereUniqueWithoutPositionClassCategoryInput!]
}

input PositionClassUpdateManyWithoutPositionClassTypeInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutPositionClassTypeInput!]
  create: [PositionClassCreateWithoutPositionClassTypeInput!]
  createMany: PositionClassCreateManyPositionClassTypeInputEnvelope
  delete: [PositionClassWhereUniqueInput!]
  deleteMany: [PositionClassScalarWhereInput!]
  disconnect: [PositionClassWhereUniqueInput!]
  set: [PositionClassWhereUniqueInput!]
  update: [PositionClassUpdateWithWhereUniqueWithoutPositionClassTypeInput!]
  updateMany: [PositionClassUpdateManyWithWhereWithoutPositionClassTypeInput!]
  upsert: [PositionClassUpsertWithWhereUniqueWithoutPositionClassTypeInput!]
}

input PositionClassUpdateManyWithoutSalaryScaleInput {
  connect: [PositionClassWhereUniqueInput!]
  connectOrCreate: [PositionClassCreateOrConnectWithoutSalaryScaleInput!]
  create: [PositionClassCreateWithoutSalaryScaleInput!]
  createMany: PositionClassCreateManySalaryScaleInputEnvelope
  delete: [PositionClassWhereUniqueInput!]
  deleteMany: [PositionClassScalarWhereInput!]
  disconnect: [PositionClassWhereUniqueInput!]
  set: [PositionClassWhereUniqueInput!]
  update: [PositionClassUpdateWithWhereUniqueWithoutSalaryScaleInput!]
  updateMany: [PositionClassUpdateManyWithWhereWithoutSalaryScaleInput!]
  upsert: [PositionClassUpsertWithWhereUniqueWithoutSalaryScaleInput!]
}

input PositionClassUpdateOneWithoutPositionsInput {
  connect: PositionClassWhereUniqueInput
  connectOrCreate: PositionClassCreateOrConnectWithoutPositionsInput
  create: PositionClassCreateWithoutPositionsInput
  delete: Boolean
  disconnect: Boolean
  update: PositionClassUpdateWithoutPositionsInput
  upsert: PositionClassUpsertWithoutPositionsInput
}

input PositionClassUpdateWithWhereUniqueWithoutGenderInput {
  data: PositionClassUpdateWithoutGenderInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpdateWithWhereUniqueWithoutPositionClassCategoryInput {
  data: PositionClassUpdateWithoutPositionClassCategoryInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpdateWithWhereUniqueWithoutPositionClassTypeInput {
  data: PositionClassUpdateWithoutPositionClassTypeInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpdateWithWhereUniqueWithoutSalaryScaleInput {
  data: PositionClassUpdateWithoutSalaryScaleInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpdateWithoutGenderInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassCategory: PositionClassCategoryUpdateOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeUpdateOneWithoutPositionClassesInput
  positions: PositionUpdateManyWithoutPositionClassInput
  salary: DecimalFieldUpdateOperationsInput
  salaryScale: SalaryScaleUpdateOneWithoutPositionClassesInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateWithoutPositionClassCategoryInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  gender: GenderUpdateOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassType: PositionClassTypeUpdateOneWithoutPositionClassesInput
  positions: PositionUpdateManyWithoutPositionClassInput
  salary: DecimalFieldUpdateOperationsInput
  salaryScale: SalaryScaleUpdateOneWithoutPositionClassesInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateWithoutPositionClassTypeInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  gender: GenderUpdateOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassCategory: PositionClassCategoryUpdateOneWithoutPositionClassesInput
  positions: PositionUpdateManyWithoutPositionClassInput
  salary: DecimalFieldUpdateOperationsInput
  salaryScale: SalaryScaleUpdateOneWithoutPositionClassesInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateWithoutPositionsInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  gender: GenderUpdateOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassCategory: PositionClassCategoryUpdateOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeUpdateOneWithoutPositionClassesInput
  salary: DecimalFieldUpdateOperationsInput
  salaryScale: SalaryScaleUpdateOneWithoutPositionClassesInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpdateWithoutSalaryScaleInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  gender: GenderUpdateOneWithoutPositionClassesInput
  locales: JSON
  maximumAge: IntFieldUpdateOperationsInput
  minimumAge: IntFieldUpdateOperationsInput
  monthlyWorkingHours: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positionClassCategory: PositionClassCategoryUpdateOneWithoutPositionClassesInput
  positionClassType: PositionClassTypeUpdateOneWithoutPositionClassesInput
  positions: PositionUpdateManyWithoutPositionClassInput
  salary: DecimalFieldUpdateOperationsInput
  specification: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionClassUpsertWithWhereUniqueWithoutGenderInput {
  create: PositionClassCreateWithoutGenderInput!
  update: PositionClassUpdateWithoutGenderInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpsertWithWhereUniqueWithoutPositionClassCategoryInput {
  create: PositionClassCreateWithoutPositionClassCategoryInput!
  update: PositionClassUpdateWithoutPositionClassCategoryInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpsertWithWhereUniqueWithoutPositionClassTypeInput {
  create: PositionClassCreateWithoutPositionClassTypeInput!
  update: PositionClassUpdateWithoutPositionClassTypeInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpsertWithWhereUniqueWithoutSalaryScaleInput {
  create: PositionClassCreateWithoutSalaryScaleInput!
  update: PositionClassUpdateWithoutSalaryScaleInput!
  where: PositionClassWhereUniqueInput!
}

input PositionClassUpsertWithoutPositionsInput {
  create: PositionClassCreateWithoutPositionsInput!
  update: PositionClassUpdateWithoutPositionsInput!
}

input PositionClassWhereInput {
  AND: [PositionClassWhereInput!]
  NOT: [PositionClassWhereInput!]
  OR: [PositionClassWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  gender: GenderRelationFilter
  genderId: IntNullableFilter
  id: IntFilter
  locales: JsonNullableFilter
  maximumAge: IntFilter
  minimumAge: IntFilter
  monthlyWorkingHours: DecimalFilter
  name: StringFilter
  positionClassCategory: PositionClassCategoryRelationFilter
  positionClassCategoryId: IntNullableFilter
  positionClassType: PositionClassTypeRelationFilter
  positionClassTypeId: IntNullableFilter
  positions: PositionListRelationFilter
  salary: DecimalFilter
  salaryScale: SalaryScaleRelationFilter
  salaryScaleId: IntNullableFilter
  specification: StringNullableFilter
  updatedAt: DateTimeFilter
}

input PositionClassWhereUniqueInput {
  code: String
  id: Int
  name: String
}

type PositionCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  deleted: Int!
  departmentId: Int!
  id: Int!
  positionClassId: Int!
  updatedAt: Int!
  vacant: Int!
}

input PositionCreateInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  department: DepartmentCreateNestedOneWithoutPositionsInput
  positionClass: PositionClassCreateNestedOneWithoutPositionsInput
  updatedAt: Timestamp
  vacant: Boolean
}

input PositionCreateManyDepartmentInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  positionClassId: Int
  updatedAt: Timestamp
  vacant: Boolean
}

input PositionCreateManyDepartmentInputEnvelope {
  data: [PositionCreateManyDepartmentInput!]!
  skipDuplicates: Boolean
}

input PositionCreateManyPositionClassInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  departmentId: Int
  id: Int
  updatedAt: Timestamp
  vacant: Boolean
}

input PositionCreateManyPositionClassInputEnvelope {
  data: [PositionCreateManyPositionClassInput!]!
  skipDuplicates: Boolean
}

input PositionCreateNestedManyWithoutDepartmentInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutDepartmentInput!]
  create: [PositionCreateWithoutDepartmentInput!]
  createMany: PositionCreateManyDepartmentInputEnvelope
}

input PositionCreateNestedManyWithoutPositionClassInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutPositionClassInput!]
  create: [PositionCreateWithoutPositionClassInput!]
  createMany: PositionCreateManyPositionClassInputEnvelope
}

input PositionCreateOrConnectWithoutDepartmentInput {
  create: PositionCreateWithoutDepartmentInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateOrConnectWithoutPositionClassInput {
  create: PositionCreateWithoutPositionClassInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateWithoutDepartmentInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  positionClass: PositionClassCreateNestedOneWithoutPositionsInput
  updatedAt: Timestamp
  vacant: Boolean
}

input PositionCreateWithoutPositionClassInput {
  code: String!
  createdAt: Timestamp
  deleted: Boolean
  department: DepartmentCreateNestedOneWithoutPositionsInput
  updatedAt: Timestamp
  vacant: Boolean
}

type PositionEdge {
  cursor: String!
  node: Position!
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

type PositionMaxAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  departmentId: Int
  id: Int
  positionClassId: Int
  updatedAt: Timestamp
  vacant: Boolean
}

type PositionMinAggregate {
  code: String
  createdAt: Timestamp
  deleted: Boolean
  departmentId: Int
  id: Int
  positionClassId: Int
  updatedAt: Timestamp
  vacant: Boolean
}

input PositionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionOrderByWithRelationInput {
  code: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  department: DepartmentOrderByWithRelationInput
  departmentId: SortOrder
  id: SortOrder
  positionClass: PositionClassOrderByWithRelationInput
  positionClassId: SortOrder
  updatedAt: SortOrder
  vacant: SortOrder
}

enum PositionScalarFieldEnum {
  code
  createdAt
  deleted
  departmentId
  id
  positionClassId
  updatedAt
  vacant
}

input PositionScalarWhereInput {
  AND: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  departmentId: IntNullableFilter
  id: IntFilter
  positionClassId: IntNullableFilter
  updatedAt: DateTimeFilter
  vacant: BoolFilter
}

type PositionSumAggregate {
  departmentId: Int
  id: Int
  positionClassId: Int
}

input PositionUpdateInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  department: DepartmentUpdateOneWithoutPositionsInput
  positionClass: PositionClassUpdateOneWithoutPositionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vacant: BoolFieldUpdateOperationsInput
}

input PositionUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vacant: BoolFieldUpdateOperationsInput
}

input PositionUpdateManyWithWhereWithoutDepartmentInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithWhereWithoutPositionClassInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithoutDepartmentInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutDepartmentInput!]
  create: [PositionCreateWithoutDepartmentInput!]
  createMany: PositionCreateManyDepartmentInputEnvelope
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutDepartmentInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input PositionUpdateManyWithoutPositionClassInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutPositionClassInput!]
  create: [PositionCreateWithoutPositionClassInput!]
  createMany: PositionCreateManyPositionClassInputEnvelope
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutPositionClassInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutPositionClassInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutPositionClassInput!]
}

input PositionUpdateWithWhereUniqueWithoutDepartmentInput {
  data: PositionUpdateWithoutDepartmentInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithWhereUniqueWithoutPositionClassInput {
  data: PositionUpdateWithoutPositionClassInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithoutDepartmentInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  positionClass: PositionClassUpdateOneWithoutPositionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vacant: BoolFieldUpdateOperationsInput
}

input PositionUpdateWithoutPositionClassInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  department: DepartmentUpdateOneWithoutPositionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vacant: BoolFieldUpdateOperationsInput
}

input PositionUpsertWithWhereUniqueWithoutDepartmentInput {
  create: PositionCreateWithoutDepartmentInput!
  update: PositionUpdateWithoutDepartmentInput!
  where: PositionWhereUniqueInput!
}

input PositionUpsertWithWhereUniqueWithoutPositionClassInput {
  create: PositionCreateWithoutPositionClassInput!
  update: PositionUpdateWithoutPositionClassInput!
  where: PositionWhereUniqueInput!
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  department: DepartmentRelationFilter
  departmentId: IntNullableFilter
  id: IntFilter
  positionClass: PositionClassRelationFilter
  positionClassId: IntNullableFilter
  updatedAt: DateTimeFilter
  vacant: BoolFilter
}

input PositionWhereUniqueInput {
  code: String
  id: Int
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  departments(cursor: DepartmentWhereUniqueInput, distinct: [DepartmentScalarFieldEnum!], orderBy: [DepartmentOrderByWithRelationInput!], skip: Int, take: Int, where: DepartmentWhereInput): PaginatedDepartment!
  employmentNature(where: EmploymentNatureWhereUniqueInput!): EmploymentNature
  employmentNatures(cursor: EmploymentNatureWhereUniqueInput, distinct: [EmploymentNatureScalarFieldEnum!], orderBy: [EmploymentNatureOrderByWithRelationInput!], skip: Int, take: Int, where: EmploymentNatureWhereInput): PaginatedEmploymentNature!
  employmentType(where: EmploymentTypeWhereUniqueInput!): EmploymentType
  employmentTypes(cursor: EmploymentTypeWhereUniqueInput, distinct: [EmploymentTypeScalarFieldEnum!], orderBy: [EmploymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: EmploymentTypeWhereInput): PaginatedEmploymentType!
  gender(where: GenderWhereUniqueInput!): Gender
  genders(cursor: GenderWhereUniqueInput, distinct: [GenderScalarFieldEnum!], orderBy: [GenderOrderByWithRelationInput!], skip: Int, take: Int, where: GenderWhereInput): PaginatedGender!
  jobGrade(where: JobGradeWhereUniqueInput!): JobGrade
  jobGrades(cursor: JobGradeWhereUniqueInput, distinct: [JobGradeScalarFieldEnum!], orderBy: [JobGradeOrderByWithRelationInput!], skip: Int, take: Int, where: JobGradeWhereInput): PaginatedJobGrade!
  jobStep(where: JobStepWhereUniqueInput!): JobStep
  jobSteps(cursor: JobStepWhereUniqueInput, distinct: [JobStepScalarFieldEnum!], orderBy: [JobStepOrderByWithRelationInput!], skip: Int, take: Int, where: JobStepWhereInput): PaginatedJobStep!
  maritalStatus(where: MaritalStatusWhereUniqueInput!): MaritalStatus
  maritalStatuses(cursor: MaritalStatusWhereUniqueInput, distinct: [MaritalStatusScalarFieldEnum!], orderBy: [MaritalStatusOrderByWithRelationInput!], skip: Int, take: Int, where: MaritalStatusWhereInput): PaginatedMaritalStatus!
  nationalities(cursor: NationalityWhereUniqueInput, distinct: [NationalityScalarFieldEnum!], orderBy: [NationalityOrderByWithRelationInput!], skip: Int, take: Int, where: NationalityWhereInput): PaginatedNationality!
  nationality(where: NationalityWhereUniqueInput!): Nationality
  position(where: PositionWhereUniqueInput!): Position
  positionClass(where: PositionClassWhereUniqueInput!): PositionClass
  positionClassCategories(cursor: PositionClassCategoryWhereUniqueInput, distinct: [PositionClassCategoryScalarFieldEnum!], orderBy: [PositionClassCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PositionClassCategoryWhereInput): PaginatedPositionClassCategory!
  positionClassCategory(where: PositionClassCategoryWhereUniqueInput!): PositionClassCategory
  positionClassType(where: PositionClassTypeWhereUniqueInput!): PositionClassType
  positionClassTypes(cursor: PositionClassTypeWhereUniqueInput, distinct: [PositionClassTypeScalarFieldEnum!], orderBy: [PositionClassTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PositionClassTypeWhereInput): PaginatedPositionClassType!
  positionClasses(cursor: PositionClassWhereUniqueInput, distinct: [PositionClassScalarFieldEnum!], orderBy: [PositionClassOrderByWithRelationInput!], skip: Int, take: Int, where: PositionClassWhereInput): PaginatedPositionClass!
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): PaginatedPosition!
  salaryScale(where: SalaryScaleWhereUniqueInput!): SalaryScale
  salaryScales(cursor: SalaryScaleWhereUniqueInput, distinct: [SalaryScaleScalarFieldEnum!], orderBy: [SalaryScaleOrderByWithRelationInput!], skip: Int, take: Int, where: SalaryScaleWhereInput): PaginatedSalaryScale!
}

enum QueryMode {
  default
  insensitive
}

type SalaryScale {
  _count: SalaryScaleCount
  createdAt: Timestamp!
  deleted: Boolean!
  id: ID!
  jobGrade: JobGrade
  jobGradeId: Int
  jobStep: JobStep
  jobStepId: Int
  positionClasses: [PositionClass!]
  salary: Float!
  updatedAt: Timestamp!
}

type SalaryScaleAvgAggregate {
  id: Float
  jobGradeId: Float
  jobStepId: Float
  salary: Float
}

type SalaryScaleCount {
  positionClasses: Int!
}

type SalaryScaleCountAggregate {
  _all: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  jobGradeId: Int!
  jobStepId: Int!
  salary: Int!
  updatedAt: Int!
}

input SalaryScaleCreateInput {
  createdAt: Timestamp
  deleted: Boolean
  jobGrade: JobGradeCreateNestedOneWithoutSalaryScalesInput
  jobStep: JobStepCreateNestedOneWithoutSalaryScalesInput
  positionClasses: PositionClassCreateNestedManyWithoutSalaryScaleInput
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleCreateManyJobGradeInput {
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  jobStepId: Int
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleCreateManyJobGradeInputEnvelope {
  data: [SalaryScaleCreateManyJobGradeInput!]!
  skipDuplicates: Boolean
}

input SalaryScaleCreateManyJobStepInput {
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  jobGradeId: Int
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleCreateManyJobStepInputEnvelope {
  data: [SalaryScaleCreateManyJobStepInput!]!
  skipDuplicates: Boolean
}

input SalaryScaleCreateNestedManyWithoutJobGradeInput {
  connect: [SalaryScaleWhereUniqueInput!]
  connectOrCreate: [SalaryScaleCreateOrConnectWithoutJobGradeInput!]
  create: [SalaryScaleCreateWithoutJobGradeInput!]
  createMany: SalaryScaleCreateManyJobGradeInputEnvelope
}

input SalaryScaleCreateNestedManyWithoutJobStepInput {
  connect: [SalaryScaleWhereUniqueInput!]
  connectOrCreate: [SalaryScaleCreateOrConnectWithoutJobStepInput!]
  create: [SalaryScaleCreateWithoutJobStepInput!]
  createMany: SalaryScaleCreateManyJobStepInputEnvelope
}

input SalaryScaleCreateNestedOneWithoutPositionClassesInput {
  connect: SalaryScaleWhereUniqueInput
  connectOrCreate: SalaryScaleCreateOrConnectWithoutPositionClassesInput
  create: SalaryScaleCreateWithoutPositionClassesInput
}

input SalaryScaleCreateOrConnectWithoutJobGradeInput {
  create: SalaryScaleCreateWithoutJobGradeInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleCreateOrConnectWithoutJobStepInput {
  create: SalaryScaleCreateWithoutJobStepInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleCreateOrConnectWithoutPositionClassesInput {
  create: SalaryScaleCreateWithoutPositionClassesInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleCreateWithoutJobGradeInput {
  createdAt: Timestamp
  deleted: Boolean
  jobStep: JobStepCreateNestedOneWithoutSalaryScalesInput
  positionClasses: PositionClassCreateNestedManyWithoutSalaryScaleInput
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleCreateWithoutJobStepInput {
  createdAt: Timestamp
  deleted: Boolean
  jobGrade: JobGradeCreateNestedOneWithoutSalaryScalesInput
  positionClasses: PositionClassCreateNestedManyWithoutSalaryScaleInput
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleCreateWithoutPositionClassesInput {
  createdAt: Timestamp
  deleted: Boolean
  jobGrade: JobGradeCreateNestedOneWithoutSalaryScalesInput
  jobStep: JobStepCreateNestedOneWithoutSalaryScalesInput
  salary: Float
  updatedAt: Timestamp
}

type SalaryScaleEdge {
  cursor: String!
  node: SalaryScale!
}

input SalaryScaleListRelationFilter {
  every: SalaryScaleWhereInput
  none: SalaryScaleWhereInput
  some: SalaryScaleWhereInput
}

type SalaryScaleMaxAggregate {
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  jobGradeId: Int
  jobStepId: Int
  salary: Float
  updatedAt: Timestamp
}

type SalaryScaleMinAggregate {
  createdAt: Timestamp
  deleted: Boolean
  id: Int
  jobGradeId: Int
  jobStepId: Int
  salary: Float
  updatedAt: Timestamp
}

input SalaryScaleOrderByRelationAggregateInput {
  _count: SortOrder
}

input SalaryScaleOrderByWithRelationInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  jobGrade: JobGradeOrderByWithRelationInput
  jobGradeId: SortOrder
  jobStep: JobStepOrderByWithRelationInput
  jobStepId: SortOrder
  positionClasses: PositionClassOrderByRelationAggregateInput
  salary: SortOrder
  updatedAt: SortOrder
}

input SalaryScaleRelationFilter {
  is: SalaryScaleWhereInput
  isNot: SalaryScaleWhereInput
}

enum SalaryScaleScalarFieldEnum {
  createdAt
  deleted
  id
  jobGradeId
  jobStepId
  salary
  updatedAt
}

input SalaryScaleScalarWhereInput {
  AND: [SalaryScaleScalarWhereInput!]
  NOT: [SalaryScaleScalarWhereInput!]
  OR: [SalaryScaleScalarWhereInput!]
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  jobGradeId: IntNullableFilter
  jobStepId: IntNullableFilter
  salary: FloatFilter
  updatedAt: DateTimeFilter
}

type SalaryScaleSumAggregate {
  id: Int
  jobGradeId: Int
  jobStepId: Int
  salary: Float
}

input SalaryScaleUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  jobGrade: JobGradeUpdateOneWithoutSalaryScalesInput
  jobStep: JobStepUpdateOneWithoutSalaryScalesInput
  positionClasses: PositionClassUpdateManyWithoutSalaryScaleInput
  salary: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalaryScaleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  salary: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalaryScaleUpdateManyWithWhereWithoutJobGradeInput {
  data: SalaryScaleUpdateManyMutationInput!
  where: SalaryScaleScalarWhereInput!
}

input SalaryScaleUpdateManyWithWhereWithoutJobStepInput {
  data: SalaryScaleUpdateManyMutationInput!
  where: SalaryScaleScalarWhereInput!
}

input SalaryScaleUpdateManyWithoutJobGradeInput {
  connect: [SalaryScaleWhereUniqueInput!]
  connectOrCreate: [SalaryScaleCreateOrConnectWithoutJobGradeInput!]
  create: [SalaryScaleCreateWithoutJobGradeInput!]
  createMany: SalaryScaleCreateManyJobGradeInputEnvelope
  delete: [SalaryScaleWhereUniqueInput!]
  deleteMany: [SalaryScaleScalarWhereInput!]
  disconnect: [SalaryScaleWhereUniqueInput!]
  set: [SalaryScaleWhereUniqueInput!]
  update: [SalaryScaleUpdateWithWhereUniqueWithoutJobGradeInput!]
  updateMany: [SalaryScaleUpdateManyWithWhereWithoutJobGradeInput!]
  upsert: [SalaryScaleUpsertWithWhereUniqueWithoutJobGradeInput!]
}

input SalaryScaleUpdateManyWithoutJobStepInput {
  connect: [SalaryScaleWhereUniqueInput!]
  connectOrCreate: [SalaryScaleCreateOrConnectWithoutJobStepInput!]
  create: [SalaryScaleCreateWithoutJobStepInput!]
  createMany: SalaryScaleCreateManyJobStepInputEnvelope
  delete: [SalaryScaleWhereUniqueInput!]
  deleteMany: [SalaryScaleScalarWhereInput!]
  disconnect: [SalaryScaleWhereUniqueInput!]
  set: [SalaryScaleWhereUniqueInput!]
  update: [SalaryScaleUpdateWithWhereUniqueWithoutJobStepInput!]
  updateMany: [SalaryScaleUpdateManyWithWhereWithoutJobStepInput!]
  upsert: [SalaryScaleUpsertWithWhereUniqueWithoutJobStepInput!]
}

input SalaryScaleUpdateOneWithoutPositionClassesInput {
  connect: SalaryScaleWhereUniqueInput
  connectOrCreate: SalaryScaleCreateOrConnectWithoutPositionClassesInput
  create: SalaryScaleCreateWithoutPositionClassesInput
  delete: Boolean
  disconnect: Boolean
  update: SalaryScaleUpdateWithoutPositionClassesInput
  upsert: SalaryScaleUpsertWithoutPositionClassesInput
}

input SalaryScaleUpdateWithWhereUniqueWithoutJobGradeInput {
  data: SalaryScaleUpdateWithoutJobGradeInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleUpdateWithWhereUniqueWithoutJobStepInput {
  data: SalaryScaleUpdateWithoutJobStepInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleUpdateWithoutJobGradeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  jobStep: JobStepUpdateOneWithoutSalaryScalesInput
  positionClasses: PositionClassUpdateManyWithoutSalaryScaleInput
  salary: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalaryScaleUpdateWithoutJobStepInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  jobGrade: JobGradeUpdateOneWithoutSalaryScalesInput
  positionClasses: PositionClassUpdateManyWithoutSalaryScaleInput
  salary: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalaryScaleUpdateWithoutPositionClassesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  jobGrade: JobGradeUpdateOneWithoutSalaryScalesInput
  jobStep: JobStepUpdateOneWithoutSalaryScalesInput
  salary: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalaryScaleUpsertWithWhereUniqueWithoutJobGradeInput {
  create: SalaryScaleCreateWithoutJobGradeInput!
  update: SalaryScaleUpdateWithoutJobGradeInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleUpsertWithWhereUniqueWithoutJobStepInput {
  create: SalaryScaleCreateWithoutJobStepInput!
  update: SalaryScaleUpdateWithoutJobStepInput!
  where: SalaryScaleWhereUniqueInput!
}

input SalaryScaleUpsertWithoutPositionClassesInput {
  create: SalaryScaleCreateWithoutPositionClassesInput!
  update: SalaryScaleUpdateWithoutPositionClassesInput!
}

input SalaryScaleWhereInput {
  AND: [SalaryScaleWhereInput!]
  NOT: [SalaryScaleWhereInput!]
  OR: [SalaryScaleWhereInput!]
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  jobGrade: JobGradeRelationFilter
  jobGradeId: IntNullableFilter
  jobStep: JobStepRelationFilter
  jobStepId: IntNullableFilter
  positionClasses: PositionClassListRelationFilter
  salary: FloatFilter
  updatedAt: DateTimeFilter
}

input SalaryScaleWhereUniqueInput {
  id: Int!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp
